/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 19 12:20:22 GMT 2019
 */

package myRobot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import myRobot.CircularTargeting;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import robocode.AdvancedRobot;
import robocode.Bullet;
import robocode.ScannedRobotEvent;
import robocode.robotinterfaces.peer.IBasicRobotPeer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CircularTargeting_ESTest extends CircularTargeting_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedRobot advancedRobot0 = new AdvancedRobot();
      CircularTargeting circularTargeting0 = new CircularTargeting(advancedRobot0);
      IBasicRobotPeer iBasicRobotPeer0 = mock(IBasicRobotPeer.class, new ViolatedAssumptionAnswer());
      doReturn(5797.0).when(iBasicRobotPeer0).getBattleFieldHeight();
      doReturn(5797.0).when(iBasicRobotPeer0).getBattleFieldWidth();
      doReturn(4397.0).when(iBasicRobotPeer0).getBodyHeading();
      doReturn(5797.0).when(iBasicRobotPeer0).getEnergy();
      doReturn(4397.0).when(iBasicRobotPeer0).getRadarHeading();
      doReturn(379.49095659, 56.93113068563184, (-1.0)).when(iBasicRobotPeer0).getX();
      doReturn(3.134617784790601, 56.93113068563184, (-733.0)).when(iBasicRobotPeer0).getY();
      advancedRobot0.setPeer(iBasicRobotPeer0);
      ScannedRobotEvent scannedRobotEvent0 = new ScannedRobotEvent("myRobot.CircularTargeting", 4397.0, 3.141592653589793, 5797.0, 5709.0, 5797.0, true);
      // Undeclared exception!
      try { 
        circularTargeting0.onScannedRobot(scannedRobotEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // robocode.robotinterfaces.peer.IBasicRobotPeer$MockitoMock$1775392926 cannot be cast to robocode.robotinterfaces.peer.IAdvancedRobotPeer
         //
         verifyException("robocode._AdvancedRadiansRobot", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedRobot advancedRobot0 = new AdvancedRobot();
      CircularTargeting circularTargeting0 = new CircularTargeting(advancedRobot0);
      IBasicRobotPeer iBasicRobotPeer0 = mock(IBasicRobotPeer.class, new ViolatedAssumptionAnswer());
      doReturn((Bullet) null).when(iBasicRobotPeer0).setFire(anyDouble());
      advancedRobot0.setPeer(iBasicRobotPeer0);
      circularTargeting0.setFire(3293.6813281205);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CircularTargeting circularTargeting0 = new CircularTargeting((AdvancedRobot) null);
      // Undeclared exception!
      try { 
        circularTargeting0.setTurnRadarRightRadians(99);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("myRobot.CircularTargeting", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedRobot advancedRobot0 = new AdvancedRobot();
      CircularTargeting circularTargeting0 = new CircularTargeting(advancedRobot0);
      IBasicRobotPeer iBasicRobotPeer0 = mock(IBasicRobotPeer.class, new ViolatedAssumptionAnswer());
      advancedRobot0.setPeer(iBasicRobotPeer0);
      // Undeclared exception!
      try { 
        circularTargeting0.setTurnRadarRightRadians((-1499.9));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // robocode.robotinterfaces.peer.IBasicRobotPeer$MockitoMock$1775392926 cannot be cast to robocode.robotinterfaces.peer.IAdvancedRobotPeer
         //
         verifyException("robocode._AdvancedRadiansRobot", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CircularTargeting circularTargeting0 = new CircularTargeting((AdvancedRobot) null);
      // Undeclared exception!
      try { 
        circularTargeting0.setTurnGunRightRadians(1156.34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("myRobot.CircularTargeting", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedRobot advancedRobot0 = new AdvancedRobot();
      IBasicRobotPeer iBasicRobotPeer0 = mock(IBasicRobotPeer.class, new ViolatedAssumptionAnswer());
      advancedRobot0.setPeer(iBasicRobotPeer0);
      CircularTargeting circularTargeting0 = new CircularTargeting(advancedRobot0);
      // Undeclared exception!
      try { 
        circularTargeting0.setTurnGunRightRadians(2763.2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // robocode.robotinterfaces.peer.IBasicRobotPeer$MockitoMock$1775392926 cannot be cast to robocode.robotinterfaces.peer.IAdvancedRobotPeer
         //
         verifyException("robocode._AdvancedRadiansRobot", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CircularTargeting circularTargeting0 = new CircularTargeting((AdvancedRobot) null);
      // Undeclared exception!
      try { 
        circularTargeting0.setFire((-2674.249423769748));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("myRobot.CircularTargeting", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedRobot advancedRobot0 = new AdvancedRobot();
      CircularTargeting circularTargeting0 = new CircularTargeting(advancedRobot0);
      ScannedRobotEvent scannedRobotEvent0 = new ScannedRobotEvent("robocode.KeyEvent", (-1087.2), (-1087.2), (-2816.43193878), (-1087.2), (-2816.43193878), true);
      // Undeclared exception!
      try { 
        circularTargeting0.onScannedRobot(scannedRobotEvent0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // You cannot call the getEnergy() method before your run() method is called, or you are using a Robot object that the game doesn't know about.
         //
         verifyException("robocode._RobotBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CircularTargeting circularTargeting0 = new CircularTargeting((AdvancedRobot) null);
      ScannedRobotEvent scannedRobotEvent0 = new ScannedRobotEvent("", (-1429.5438), (-1429.5438), 1349.107374, 3.0, (-1142.232448));
      // Undeclared exception!
      try { 
        circularTargeting0.onScannedRobot(scannedRobotEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("myRobot.CircularTargeting", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedRobot advancedRobot0 = new AdvancedRobot();
      CircularTargeting circularTargeting0 = new CircularTargeting(advancedRobot0);
      // Undeclared exception!
      try { 
        circularTargeting0.setTurnRadarRightRadians(1570.98135738);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // You cannot call the setTurnRadarRightRadians() method before your run() method is called, or you are using a Robot object that the game doesn't know about.
         //
         verifyException("robocode._RobotBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedRobot advancedRobot0 = new AdvancedRobot();
      CircularTargeting circularTargeting0 = new CircularTargeting(advancedRobot0);
      IBasicRobotPeer iBasicRobotPeer0 = mock(IBasicRobotPeer.class, new ViolatedAssumptionAnswer());
      doReturn((-136.92)).when(iBasicRobotPeer0).getBattleFieldHeight();
      doReturn(1100.805730418783).when(iBasicRobotPeer0).getBattleFieldWidth();
      doReturn(327.524437382).when(iBasicRobotPeer0).getBodyHeading();
      doReturn((-136.92)).when(iBasicRobotPeer0).getEnergy();
      doReturn(1100.805730418783).when(iBasicRobotPeer0).getRadarHeading();
      doReturn((-136.92), 327.524437382, 327.524437382).when(iBasicRobotPeer0).getX();
      doReturn((-136.92), 327.524437382, 1100.805730418783).when(iBasicRobotPeer0).getY();
      advancedRobot0.setPeer(iBasicRobotPeer0);
      ScannedRobotEvent scannedRobotEvent0 = new ScannedRobotEvent();
      // Undeclared exception!
      try { 
        circularTargeting0.onScannedRobot(scannedRobotEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // robocode.robotinterfaces.peer.IBasicRobotPeer$MockitoMock$1775392926 cannot be cast to robocode.robotinterfaces.peer.IAdvancedRobotPeer
         //
         verifyException("robocode._AdvancedRadiansRobot", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedRobot advancedRobot0 = new AdvancedRobot();
      CircularTargeting circularTargeting0 = new CircularTargeting(advancedRobot0);
      IBasicRobotPeer iBasicRobotPeer0 = mock(IBasicRobotPeer.class, new ViolatedAssumptionAnswer());
      doReturn(18.0).when(iBasicRobotPeer0).getBattleFieldHeight();
      doReturn(18.0).when(iBasicRobotPeer0).getBattleFieldWidth();
      doReturn(18.0).when(iBasicRobotPeer0).getBodyHeading();
      doReturn(18.0).when(iBasicRobotPeer0).getEnergy();
      doReturn(18.0).when(iBasicRobotPeer0).getRadarHeading();
      doReturn(18.0, 564.3087652033417, 18.0).when(iBasicRobotPeer0).getX();
      doReturn(18.0, 564.3087652033417, 18.0).when(iBasicRobotPeer0).getY();
      advancedRobot0.setPeer(iBasicRobotPeer0);
      ScannedRobotEvent scannedRobotEvent0 = new ScannedRobotEvent();
      // Undeclared exception!
      try { 
        circularTargeting0.onScannedRobot(scannedRobotEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // robocode.robotinterfaces.peer.IBasicRobotPeer$MockitoMock$1775392926 cannot be cast to robocode.robotinterfaces.peer.IAdvancedRobotPeer
         //
         verifyException("robocode._AdvancedRadiansRobot", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedRobot advancedRobot0 = new AdvancedRobot();
      CircularTargeting circularTargeting0 = new CircularTargeting(advancedRobot0);
      IBasicRobotPeer iBasicRobotPeer0 = mock(IBasicRobotPeer.class, new ViolatedAssumptionAnswer());
      doReturn(5788.967719015571).when(iBasicRobotPeer0).getBattleFieldHeight();
      doReturn(5788.967719015571).when(iBasicRobotPeer0).getBattleFieldWidth();
      doReturn(5788.967719015571).when(iBasicRobotPeer0).getBodyHeading();
      doReturn(5788.967719015571).when(iBasicRobotPeer0).getEnergy();
      doReturn(5788.967719015571).when(iBasicRobotPeer0).getRadarHeading();
      doReturn(5788.967719015571, 56.93113068563184, 5788.967719015571).when(iBasicRobotPeer0).getX();
      doReturn(5788.967719015571, 56.93113068563184, 5788.967719015571).when(iBasicRobotPeer0).getY();
      advancedRobot0.setPeer(iBasicRobotPeer0);
      ScannedRobotEvent scannedRobotEvent0 = new ScannedRobotEvent();
      // Undeclared exception!
      try { 
        circularTargeting0.onScannedRobot(scannedRobotEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // robocode.robotinterfaces.peer.IBasicRobotPeer$MockitoMock$1775392926 cannot be cast to robocode.robotinterfaces.peer.IAdvancedRobotPeer
         //
         verifyException("robocode._AdvancedRadiansRobot", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedRobot advancedRobot0 = new AdvancedRobot();
      CircularTargeting circularTargeting0 = new CircularTargeting(advancedRobot0);
      IBasicRobotPeer iBasicRobotPeer0 = mock(IBasicRobotPeer.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(iBasicRobotPeer0).getBattleFieldHeight();
      doReturn(0.0).when(iBasicRobotPeer0).getBattleFieldWidth();
      doReturn(0.0).when(iBasicRobotPeer0).getBodyHeading();
      doReturn(0.0).when(iBasicRobotPeer0).getEnergy();
      doReturn(0.0).when(iBasicRobotPeer0).getRadarHeading();
      doReturn(0.0, 0.0, 0.0).when(iBasicRobotPeer0).getX();
      doReturn(0.0, 0.0, 0.0).when(iBasicRobotPeer0).getY();
      advancedRobot0.setPeer(iBasicRobotPeer0);
      ScannedRobotEvent scannedRobotEvent0 = new ScannedRobotEvent("myRobot.CircularTargeting", 4397.0, 3.141592653589793, 5797.0, 5709.0, 5797.0, true);
      // Undeclared exception!
      try { 
        circularTargeting0.onScannedRobot(scannedRobotEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // robocode.robotinterfaces.peer.IBasicRobotPeer$MockitoMock$1775392926 cannot be cast to robocode.robotinterfaces.peer.IAdvancedRobotPeer
         //
         verifyException("robocode._AdvancedRadiansRobot", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedRobot advancedRobot0 = new AdvancedRobot();
      CircularTargeting circularTargeting0 = new CircularTargeting(advancedRobot0);
      // Undeclared exception!
      try { 
        circularTargeting0.setTurnGunRightRadians((-21.695835464868235));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // You cannot call the setTurnGunRightRadians() method before your run() method is called, or you are using a Robot object that the game doesn't know about.
         //
         verifyException("robocode._RobotBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedRobot advancedRobot0 = new AdvancedRobot();
      CircularTargeting circularTargeting0 = new CircularTargeting(advancedRobot0);
      // Undeclared exception!
      try { 
        circularTargeting0.setFire((-2665.0));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // You cannot call the setFire() method before your run() method is called, or you are using a Robot object that the game doesn't know about.
         //
         verifyException("robocode._RobotBase", e);
      }
  }
}
